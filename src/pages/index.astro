---
// OSINT 工作台 V3.0 - shadcn样式双栏布局
---
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OSINT 工作台 V3.0</title>
  <script src="https://cdn.jsdelivr.net/npm/split.js@1.6.5/dist/split.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.min.js"></script>
  <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
  <style>
    /* CSS Variables - shadcn 色彩系统 */
    :root {
      --background: 0 0% 100%;
      --foreground: 222.2 84% 4.9%;
      --card: 0 0% 100%;
      --card-foreground: 222.2 84% 4.9%;
      --popover: 0 0% 100%;
      --popover-foreground: 222.2 84% 4.9%;
      --primary: 224.3 76.3% 48%;
      --primary-foreground: 210 40% 98%;
      --secondary: 210 40% 96%;
      --secondary-foreground: 222.2 47.4% 11.2%;
      --muted: 210 40% 96%;
      --muted-foreground: 215.4 16.3% 46.9%;
      --accent: 210 40% 96%;
      --accent-foreground: 222.2 47.4% 11.2%;
      --destructive: 0 84.2% 60.2%;
      --destructive-foreground: 210 40% 98%;
      --border: 214.3 31.8% 91.4%;
      --input: 214.3 31.8% 91.4%;
      --ring: 222.2 84% 4.9%;
      --radius: 0.5rem;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      height: 100vh;
      overflow: hidden;
      background: hsl(var(--background));
      color: hsl(var(--foreground));
    }

    /* shadcn Button 样式 */
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      border-radius: calc(var(--radius) - 2px);
      font-size: 0.875rem;
      font-weight: 500;
      transition: all 0.2s;
      cursor: pointer;
      border: 1px solid transparent;
      text-decoration: none;
    }

    .btn-primary {
      background: hsl(var(--primary));
      color: hsl(var(--primary-foreground));
      padding: 0.625rem 1rem;
    }

    .btn-primary:hover {
      background: hsl(var(--primary) / 0.9);
    }

    .btn-secondary {
      background: hsl(var(--secondary));
      color: hsl(var(--secondary-foreground));
      padding: 0.625rem 1rem;
    }

    .btn-secondary:hover {
      background: hsl(var(--secondary) / 0.8);
    }

    .btn-ghost {
      background: transparent;
      color: hsl(var(--foreground));
      padding: 0.625rem 1rem;
    }

    .btn-ghost:hover {
      background: hsl(var(--accent));
    }

    .btn-sm {
      padding: 0.375rem 0.75rem;
      font-size: 0.75rem;
    }

    .btn-icon {
      width: 2.5rem;
      height: 2.5rem;
      padding: 0;
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* shadcn Card 样式 */
    .card {
      background: hsl(var(--card));
      border: 1px solid hsl(var(--border));
      border-radius: var(--radius);
      box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    }

    .card-header {
      display: flex;
      flex-direction: column;
      padding: 1.5rem;
      padding-bottom: 0;
    }

    .card-content {
      padding: 1.5rem;
    }

    .card-footer {
      display: flex;
      align-items: center;
      padding: 1.5rem;
      padding-top: 0;
    }

    /* shadcn Badge 样式 */
    .badge {
      display: inline-flex;
      align-items: center;
      border-radius: 9999px;
      padding: 0.25rem 0.625rem;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .badge-default {
      background: hsl(var(--primary));
      color: hsl(var(--primary-foreground));
    }

    .badge-success {
      background: hsl(142.1 70.6% 45.3%);
      color: hsl(355.7 100% 97.3%);
    }

    .badge-warning {
      background: hsl(47.9 95.8% 53.1%);
      color: hsl(222.2 84% 4.9%);
    }

    .badge-destructive {
      background: hsl(var(--destructive));
      color: hsl(var(--destructive-foreground));
    }

    /* shadcn Input 样式 */
    .input {
      display: flex;
      height: 2.5rem;
      width: 100%;
      border-radius: calc(var(--radius) - 2px);
      border: 1px solid hsl(var(--input));
      background: hsl(var(--background));
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
      transition: border-color 0.2s;
    }

    .input:focus {
      outline: none;
      border-color: hsl(var(--ring));
      box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2);
    }

    .input::placeholder {
      color: hsl(var(--muted-foreground));
    }

    /* shadcn Tabs 样式 */
    .tabs {
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: calc(var(--radius) - 2px);
      background: hsl(var(--muted));
      padding: 0.25rem;
    }

    .tabs-trigger {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      white-space: nowrap;
      border-radius: calc(var(--radius) - 4px);
      padding: 0.375rem 0.75rem;
      font-size: 0.875rem;
      font-weight: 500;
      transition: all 0.2s;
      cursor: pointer;
      border: none;
      background: transparent;
      color: hsl(var(--muted-foreground));
    }

    .tabs-trigger.active {
      background: hsl(var(--background));
      color: hsl(var(--foreground));
      box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    }

    .tabs-trigger:hover:not(.active) {
      background: hsl(var(--accent));
      color: hsl(var(--accent-foreground));
    }

    /* Layout 样式 */
    .navbar {
      height: 4rem;
      background: hsl(var(--background));
      border-bottom: 1px solid hsl(var(--border));
      display: flex;
      align-items: center;
      padding: 0 1rem;
      gap: 1rem;
      z-index: 100;
    }

    /* 活动过滤器样式 */
    .active-filters {
      background: hsl(var(--background));
      border-bottom: 1px solid hsl(var(--border));
      padding: 0.75rem 1rem;
      display: none;
      flex-wrap: wrap;
      gap: 0.5rem;
      align-items: center;
    }

    .active-filters.visible {
      display: flex;
    }

    .active-filters-label {
      font-size: 0.875rem;
      color: hsl(var(--muted-foreground));
      margin-right: 0.5rem;
    }

    .filter-pill {
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      background: hsl(var(--primary));
      color: hsl(var(--primary-foreground));
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .filter-pill-remove {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 1rem;
      height: 1rem;
      border-radius: 50%;
      background: hsl(var(--primary-foreground) / 0.2);
      color: hsl(var(--primary-foreground));
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .filter-pill-remove:hover {
      background: hsl(var(--primary-foreground) / 0.3);
    }

    .main-container {
      height: calc(100vh - 4rem);
      display: flex;
    }

    .main-container.with-filters {
      height: calc(100vh - 4rem - 3.5rem);
    }

    .split {
      display: flex;
      height: 100%;
    }

    .source-panel {
      overflow-y: auto;
      background: hsl(var(--muted) / 0.3);
      padding: 1rem;
    }

    .draft-panel {
      background: hsl(var(--background));
      border-left: 1px solid hsl(var(--border));
      padding: 1rem;
      display: flex;
      flex-direction: column;
    }

    /* 文章卡片样式 */
    .article-card {
      margin-bottom: 1rem;
      transition: all 0.2s;
      cursor: pointer;
    }

    .article-card:hover {
      box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }

    .article-card.selected {
      background: hsl(var(--muted));
      border-color: hsl(var(--muted-foreground));
    }

    .article-title {
      font-weight: 600;
      font-size: 1rem;
      color: hsl(var(--foreground));
      margin-bottom: 0.5rem;
      line-height: 1.4;
      text-decoration: none;
      word-wrap: break-word;
      word-break: break-word;
      overflow-wrap: break-word;
      hyphens: auto;
    }

    .article-title:hover {
      color: hsl(var(--primary));
    }

    .article-summary {
      color: hsl(var(--muted-foreground));
      font-size: 0.875rem;
      line-height: 1.5;
      margin-bottom: 1rem;
    }

    .article-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .article-source {
      color: hsl(var(--muted-foreground));
      font-size: 0.75rem;
    }

    /* 草稿卡片样式 */
    .draft-card {
      margin-bottom: 1rem;
      cursor: grab;
    }

    .draft-card:active {
      cursor: grabbing;
    }

    .draft-card .card-header {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: flex-start;
      padding-bottom: 0.75rem;
    }

    .draft-title {
      font-weight: 600;
      font-size: 0.875rem;
      color: hsl(var(--foreground));
      flex: 1;
    }

    .draft-summary {
      width: 100%;
      min-height: 5rem;
      border: 1px solid hsl(var(--input));
      border-radius: calc(var(--radius) - 2px);
      padding: 0.75rem;
      font-size: 0.875rem;
      resize: vertical;
      background: hsl(var(--background));
      color: hsl(var(--foreground));
    }

    .draft-summary:focus {
      outline: none;
      border-color: hsl(var(--ring));
      box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2);
    }

    .publish-section {
      margin-top: auto;
      padding-top: 1rem;
      border-top: 1px solid hsl(var(--border));
    }

    /* 响应式设计 */
    @media (max-width: 768px) {
      .navbar {
        flex-wrap: wrap;
        height: auto;
        padding: 0.5rem;
      }

      .main-container {
        height: calc(100vh - 5rem);
      }

      .split {
        flex-direction: column;
      }

      .source-panel, .draft-panel {
        height: 50vh;
      }
    }

    /* 滚动条样式 */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: hsl(var(--muted));
    }

    ::-webkit-scrollbar-thumb {
      background: hsl(var(--muted-foreground) / 0.3);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: hsl(var(--muted-foreground) / 0.5);
    }

    /* 分割线样式 */
    .gutter {
      background: hsl(var(--border));
      background-repeat: no-repeat;
      background-position: 50%;
    }

    .gutter.gutter-horizontal {
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="10" height="30"><path d="M2 0v30M8 0v30" stroke="rgb(156 163 175)" stroke-width="1"/></svg>');
      cursor: col-resize;
    }

    .gutter.gutter-vertical {
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="30" height="10"><path d="M0 2h30M0 8h30" stroke="rgb(156 163 175)" stroke-width="1"/></svg>');
      cursor: row-resize;
    }

    /* 加载状态 */
    .loading {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem;
      color: hsl(var(--muted-foreground));
    }

    .spinner {
      width: 1.5rem;
      height: 1.5rem;
      border: 2px solid hsl(var(--muted));
      border-top: 2px solid hsl(var(--primary));
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* 空状态样式 */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 3rem 1rem;
      text-align: center;
      color: hsl(var(--muted-foreground));
    }

    .empty-state svg {
      width: 3rem;
      height: 3rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    .empty-state h3 {
      font-size: 1.125rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: hsl(var(--foreground));
    }

    .empty-state p {
      font-size: 0.875rem;
      max-width: 20rem;
    }
  </style>
</head>
<body>
  <!-- 顶部导航栏 -->
  <nav class="navbar">
    <button class="btn btn-ghost btn-icon" id="refreshBtn" title="刷新数据">
      <i data-lucide="refresh-cw"></i>
    </button>
    
    <input 
      type="text" 
      class="input" 
      placeholder="搜索标题..." 
      id="searchInput"
      style="flex: 1;"
    >
    
    <button class="btn btn-secondary" id="filterBtn">
      <i data-lucide="filter"></i>
      过滤器
    </button>
    
    <button class="btn btn-primary" id="fetchRssBtn">
      <i data-lucide="rss"></i>
      抓取RSS
    </button>
    
    <div class="tabs">
      <button class="tabs-trigger active" data-status="inbox">
        <i data-lucide="inbox"></i>
        待处理
      </button>
      <button class="tabs-trigger" data-status="selected">
        <i data-lucide="check-circle"></i>
        已选中
      </button>
      <button class="tabs-trigger" data-status="all">
        <i data-lucide="list"></i>
        全部
      </button>
    </div>
  </nav>

  <!-- 活动过滤器条 -->
  <div class="active-filters" id="activeFilters">
    <span class="active-filters-label">当前过滤器:</span>
    <div id="filterPills"></div>
  </div>

  <!-- 主要内容区域 -->
  <div class="main-container">
    <div class="split" id="split">
      <!-- 左侧信息源面板 -->
      <div class="source-panel" id="sourcePanel">
        <div class="loading" id="loadingIndicator">
          <div class="spinner"></div>
          <span style="margin-left: 0.5rem;">加载中...</span>
        </div>
        <div id="articlesList"></div>
      </div>

      <!-- 右侧草稿箱面板 -->
      <div class="draft-panel" id="draftPanel">
        <div style="margin-bottom: 1rem;">
          <h2 style="font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem;">草稿箱</h2>
          <p style="font-size: 0.875rem; color: hsl(var(--muted-foreground));">
            拖拽卡片来调整发布顺序
          </p>
        </div>
        
        <div id="draftsList" style="flex: 1; overflow-y: auto;"></div>
        
        <div class="publish-section">
          <button class="btn btn-primary" id="publishBtn" style="width: 100%;">
            <i data-lucide="send"></i>
            生成并复制内容
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // 初始化Lucide图标
    lucide.createIcons();

    // 初始化Supabase客户端
    const supabaseUrl = 'https://msvgeriacsaaakmxvqye.supabase.co'
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1zdmdlcmlhY3NhYWFrbXh2cXllIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc2MDQyMDksImV4cCI6MjA1MzE4MDIwOX0.wF83FpJ8N9SCj6BKAeLxHtmaS2cPsCPs1BoXzVwvJQ0'
    const supabase = window.supabase.createClient(supabaseUrl, supabaseKey)

    // 全局状态
    let currentStatus = 'inbox'
    let searchQuery = ''
    let articles = []
    let drafts = []
    let sortableInstance = null
    let activeFilters = {
      search: '',
      status: 'inbox',
      score: null,
      source: null
    }

    // 初始化Split.js - 带布局持久化
    function initSplitLayout() {
      // 从localStorage读取保存的布局比例
      const savedSizes = localStorage.getItem('osint-layout-sizes')
      let defaultSizes = [40, 60]  // 左40%，右60%
      
      if (savedSizes) {
        try {
          const parsed = JSON.parse(savedSizes)
          if (Array.isArray(parsed) && parsed.length === 2) {
            defaultSizes = parsed
            console.log('从localStorage恢复布局:', defaultSizes)
          }
        } catch (e) {
          console.log('解析保存的布局失败，使用默认布局')
        }
      }

      const split = Split(['#sourcePanel', '#draftPanel'], {
        sizes: defaultSizes,
        minSize: [300, 200],
        gutterSize: 8,
        cursor: 'col-resize',
        onDragEnd: function(sizes) {
          // 保存布局到localStorage
          localStorage.setItem('osint-layout-sizes', JSON.stringify(sizes))
          console.log('保存布局到localStorage:', sizes)
        }
      })
      
      return split
    }

    const split = initSplitLayout()

    // 初始化应用
    async function initApp() {
      await loadArticles()
      initEventListeners()
      initSortable()
    }

    // 加载文章数据
    async function loadArticles() {
      try {
        showLoading(true)
        
        let query = supabase
          .from('articles')
          .select('*')
          .order('created_at', { ascending: false })

        // 根据状态过滤
        if (currentStatus === 'inbox') {
          query = query.eq('is_selected', false)
        } else if (currentStatus === 'selected') {
          query = query.eq('is_selected', true)
        }

        // 搜索过滤
        if (searchQuery) {
          query = query.ilike('title', `%${searchQuery}%`)
        }

        const { data, error } = await query

        if (error) {
          console.error('加载文章失败:', error)
          showError('加载文章失败: ' + error.message)
          return
        }

        articles = data || []
        renderArticles()
        
        // 同时加载草稿
        await loadDrafts()
        
      } catch (error) {
        console.error('加载文章出错:', error)
        showError('加载文章出错: ' + error.message)
      } finally {
        showLoading(false)
      }
    }

    // 加载草稿数据
    async function loadDrafts() {
      try {
        const { data, error } = await supabase
          .from('articles')
          .select('*')
          .eq('is_selected', true)
          .order('created_at', { ascending: false })

        if (error) {
          console.error('加载草稿失败:', error)
          return
        }

        drafts = data || []
        renderDrafts()
      } catch (error) {
        console.error('加载草稿出错:', error)
      }
    }

    // 渲染文章列表
    function renderArticles() {
      const container = document.getElementById('articlesList')
      
      if (articles.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <svg data-lucide="inbox"></svg>
            <h3>暂无文章</h3>
            <p>点击刷新按钮获取最新文章，或尝试调整过滤条件</p>
          </div>
        `
        lucide.createIcons()
        return
      }

      container.innerHTML = articles.map(article => `
        <div class="article-card card ${article.is_selected ? 'selected' : ''}" data-id="${article.id}">
          <div class="card-header">
            <div class="badge ${getScoreBadgeClass(article.score_ai)}" style="margin-bottom: 0.5rem;">
              评分: ${article.score_ai || 'N/A'}
            </div>
            <a href="${article.original_article_link}" target="_blank" class="article-title">
              ${article.title}
            </a>
          </div>
          <div class="card-content">
            <p class="article-summary">${article.summary_ai || '暂无摘要'}</p>
          </div>
          <div class="card-footer article-footer">
            <span class="article-source">${article.vertical_name || '未知来源'}</span>
            <button class="btn btn-sm ${article.is_selected ? 'btn-ghost' : 'btn-primary'}" 
                    onclick="toggleSelection(${article.id})"
                    ${article.is_selected ? 'disabled' : ''}>
              ${article.is_selected ? '✓ 已选' : '+ 选中'}
            </button>
          </div>
        </div>
      `).join('')
    }

    // 渲染草稿列表
    function renderDrafts() {
      const container = document.getElementById('draftsList')
      
      if (drafts.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <svg data-lucide="edit"></svg>
            <h3>暂无草稿</h3>
            <p>从左侧选择文章开始编辑</p>
          </div>
        `
        lucide.createIcons()
        return
      }

      container.innerHTML = drafts.map(draft => `
        <div class="draft-card card" data-id="${draft.id}">
          <div class="card-header">
            <div class="draft-title">${draft.title}</div>
            <button class="btn btn-ghost btn-sm" onclick="removeDraft(${draft.id})">
              <i data-lucide="x"></i>
            </button>
          </div>
          <div class="card-content">
            <textarea 
              class="draft-summary" 
              placeholder="编辑摘要..." 
              id="textarea-${draft.id}"
            >${draft.final_summary || draft.summary_ai || ''}</textarea>
            <div style="margin-top: 0.5rem; text-align: right;">
              <button class="btn btn-ghost btn-sm" onclick="saveDraftSummary(${draft.id})">
                <i data-lucide="save"></i>
                保存修改
              </button>
            </div>
          </div>
        </div>
      `).join('')
      
      lucide.createIcons()
    }

    // 获取评分徽章样式
    function getScoreBadgeClass(score) {
      if (score >= 8) return 'badge-success'
      if (score >= 6) return 'badge-warning'
      if (score >= 1) return 'badge-destructive'
      return 'badge-default'
    }

    // 切换文章选择状态 - 带乐观更新
    async function toggleSelection(articleId) {
      try {
        const article = articles.find(a => a.id === articleId)
        if (!article || article.is_selected) return

        // 1. 立即进行乐观更新 - 不等待后端响应
        const button = document.querySelector(`[onclick="toggleSelection(${articleId})"]`)
        const originalText = button.innerHTML
        
        // 立即更新UI状态
        article.is_selected = true
        button.innerHTML = '<div class="spinner" style="width: 0.75rem; height: 0.75rem; margin: 0 auto;"></div>'
        button.disabled = true
        
        // 立即渲染新状态
        renderArticles()
        
        // 添加到草稿箱
        drafts.push(article)
        renderDrafts()
        
        // 重新初始化拖拽
        if (sortableInstance) {
          sortableInstance.destroy()
        }
        initSortable()

        // 2. 后端确认
        const { error } = await supabase
          .from('articles')
          .update({ 
            is_selected: true,
            final_summary: article.summary_ai || ''
          })
          .eq('id', articleId)

        // 3. 根据后端结果更新最终状态
        if (error) {
          console.error('更新选择状态失败:', error)
          
          // 回滚乐观更新
          article.is_selected = false
          drafts = drafts.filter(d => d.id !== articleId)
          
          renderArticles()
          renderDrafts()
          
          if (sortableInstance) {
            sortableInstance.destroy()
          }
          initSortable()
          
          showError('选择文章失败: ' + error.message)
          return
        }

        // 成功 - 更新为最终状态
        renderArticles()
        
      } catch (error) {
        console.error('切换选择状态出错:', error)
        
        // 发生异常时回滚
        const article = articles.find(a => a.id === articleId)
        if (article) {
          article.is_selected = false
          drafts = drafts.filter(d => d.id !== articleId)
          renderArticles()
          renderDrafts()
          
          if (sortableInstance) {
            sortableInstance.destroy()
          }
          initSortable()
        }
        
        showError('切换选择状态出错: ' + error.message)
      }
    }

    // 移除草稿
    async function removeDraft(articleId) {
      try {
        const { error } = await supabase
          .from('articles')
          .update({ is_selected: false })
          .eq('id', articleId)

        if (error) {
          console.error('移除草稿失败:', error)
          showError('移除草稿失败: ' + error.message)
          return
        }

        // 更新本地状态
        const articleIndex = articles.findIndex(a => a.id === articleId)
        if (articleIndex !== -1) {
          articles[articleIndex].is_selected = false
        }
        
        drafts = drafts.filter(d => d.id !== articleId)
        
        renderArticles()
        renderDrafts()
        
        // 重新初始化拖拽
        if (sortableInstance) {
          sortableInstance.destroy()
        }
        initSortable()
        
      } catch (error) {
        console.error('移除草稿出错:', error)
        showError('移除草稿出错: ' + error.message)
      }
    }

    // 手动保存草稿摘要
    async function saveDraftSummary(articleId) {
      try {
        const textarea = document.getElementById(`textarea-${articleId}`)
        const summary = textarea.value
        const saveBtn = document.querySelector(`[onclick="saveDraftSummary(${articleId})"]`)
        
        // 显示保存状态
        const originalText = saveBtn.innerHTML
        saveBtn.innerHTML = '<div class="spinner" style="width: 0.75rem; height: 0.75rem; margin: 0 auto;"></div> 保存中...'
        saveBtn.disabled = true

        const { error } = await supabase
          .from('articles')
          .update({ final_summary: summary })
          .eq('id', articleId)

        if (error) {
          console.error('保存草稿摘要失败:', error)
          showError('保存草稿摘要失败: ' + error.message)
          return
        }

        // 更新本地状态
        const draft = drafts.find(d => d.id === articleId)
        if (draft) {
          draft.final_summary = summary
        }

        // 显示成功状态
        saveBtn.innerHTML = '<i data-lucide="check"></i> 已保存'
        saveBtn.style.color = 'hsl(142.1 70.6% 45.3%)'
        
        // 2秒后恢复原状
        setTimeout(() => {
          saveBtn.innerHTML = '<i data-lucide="save"></i> 保存修改'
          saveBtn.style.color = ''
          saveBtn.disabled = false
          lucide.createIcons()
        }, 2000)
        
      } catch (error) {
        console.error('保存草稿摘要出错:', error)
        showError('保存草稿摘要出错: ' + error.message)
        
        // 恢复按钮状态
        const saveBtn = document.querySelector(`[onclick="saveDraftSummary(${articleId})"]`)
        saveBtn.innerHTML = '<i data-lucide="save"></i> 保存修改'
        saveBtn.disabled = false
        lucide.createIcons()
      }
    }

    // 初始化拖拽排序
    function initSortable() {
      const draftsList = document.getElementById('draftsList')
      if (!draftsList) return

      sortableInstance = new Sortable(draftsList, {
        animation: 150,
        ghostClass: 'opacity-50',
        chosenClass: 'scale-105',
        onEnd: function (evt) {
          // 重新排序草稿数组
          const item = drafts.splice(evt.oldIndex, 1)[0]
          drafts.splice(evt.newIndex, 0, item)
        }
      })
    }

    // 生成并复制内容
    async function publishContent() {
      try {
        if (drafts.length === 0) {
          showError('请先选择一些文章')
          return
        }

        const content = drafts.map(draft => {
          const title = draft.title
          const summary = draft.final_summary || draft.summary_ai || ''
          return `## ${title}\n\n${summary}\n\n`
        }).join('')

        await navigator.clipboard.writeText(content)
        showSuccess('内容已复制到剪贴板')
        
      } catch (error) {
        console.error('复制内容失败:', error)
        showError('复制内容失败: ' + error.message)
      }
    }

    // 抓取所有RSS源
    async function fetchAllRssSources() {
      try {
        showLoading(true)
        const fetchBtn = document.getElementById('fetchRssBtn')
        const originalText = fetchBtn.innerHTML
        fetchBtn.innerHTML = '<div class="spinner" style="width: 1rem; height: 1rem;"></div> 抓取中...'
        fetchBtn.disabled = true

        // 1. 获取所有活跃的RSS源
        const { data: rssSources, error: sourcesError } = await supabase
          .from('rss_sources')
          .select('*')
          .eq('is_active', true)

        if (sourcesError) {
          throw new Error('获取RSS源失败: ' + sourcesError.message)
        }

        if (!rssSources || rssSources.length === 0) {
          showError('没有找到活跃的RSS源')
          return
        }

        let totalFetched = 0
        let totalErrors = 0

        // 2. 逐个抓取RSS源
        for (const source of rssSources) {
          try {
            console.log(`正在抓取: ${source.name}`)
            
            // 调用Supabase Edge Function (设置90秒超时)
            const { data, error } = await supabase.functions.invoke('fetch-rss', {
              body: { 
                rssUrl: source.url, 
                sourceName: source.name,
                verticalName: source.vertical_name
              },
              options: {
                headers: {
                  'Content-Type': 'application/json'
                },
                timeout: 90000 // 90秒超时
              }
            })

            if (error) {
              console.error(`抓取${source.name}失败:`, error)
              totalErrors++
              continue
            }

            if (data && data.success) {
              totalFetched += data.count || 0
              console.log(`成功抓取${source.name}: ${data.count}篇文章`)
            } else {
              console.error(`抓取${source.name}失败:`, data?.error || '未知错误')
              totalErrors++
            }

            // 添加延迟避免过于频繁的请求
            await new Promise(resolve => setTimeout(resolve, 1000))

          } catch (sourceError) {
            console.error(`抓取${source.name}出错:`, sourceError)
            totalErrors++
          }
        }

        // 3. 显示结果
        if (totalFetched > 0) {
          showSuccess(`成功抓取 ${totalFetched} 篇文章！${totalErrors > 0 ? ` (${totalErrors}个源失败)` : ''}`)
          // 刷新文章列表
          await loadArticles()
        } else {
          showError(`RSS抓取失败，共 ${totalErrors} 个源出错`)
        }

      } catch (error) {
        console.error('RSS抓取出错:', error)
        showError('RSS抓取出错: ' + error.message)
      } finally {
        showLoading(false)
        const fetchBtn = document.getElementById('fetchRssBtn')
        fetchBtn.innerHTML = '<i data-lucide="rss"></i> 抓取RSS'
        fetchBtn.disabled = false
        lucide.createIcons()
      }
    }

    // 初始化事件监听器
    function initEventListeners() {
      // 刷新按钮
      document.getElementById('refreshBtn').addEventListener('click', loadArticles)

      // 搜索输入框
      let searchTimeout
      document.getElementById('searchInput').addEventListener('input', (e) => {
        clearTimeout(searchTimeout)
        searchTimeout = setTimeout(() => {
          searchQuery = e.target.value.trim()
          activeFilters.search = searchQuery
          updateActiveFilters()
          loadArticles()
        }, 300)
      })

      // 状态切换标签
      document.querySelectorAll('.tabs-trigger').forEach(tab => {
        tab.addEventListener('click', (e) => {
          // 移除所有active类
          document.querySelectorAll('.tabs-trigger').forEach(t => t.classList.remove('active'))
          // 添加active类到当前标签
          e.target.classList.add('active')
          
          currentStatus = e.target.dataset.status
          activeFilters.status = currentStatus
          updateActiveFilters()
          loadArticles()
        })
      })

      // 发布按钮
      document.getElementById('publishBtn').addEventListener('click', publishContent)

      // 过滤器按钮 (待实现)
      document.getElementById('filterBtn').addEventListener('click', () => {
        showInfo('过滤器功能开发中...')
      })

      // RSS抓取按钮
      document.getElementById('fetchRssBtn').addEventListener('click', fetchAllRssSources)
    }

    // 显示加载状态
    function showLoading(show) {
      const loading = document.getElementById('loadingIndicator')
      const articlesList = document.getElementById('articlesList')
      
      if (show) {
        loading.style.display = 'flex'
        articlesList.style.display = 'none'
      } else {
        loading.style.display = 'none'
        articlesList.style.display = 'block'
      }
    }

    // 显示错误消息
    function showError(message) {
      // 简单的错误显示，可以后续改进为Toast组件
      alert('错误: ' + message)
    }

    // 显示成功消息
    function showSuccess(message) {
      // 简单的成功显示，可以后续改进为Toast组件
      alert('成功: ' + message)
    }

    // 显示信息消息
    function showInfo(message) {
      // 简单的信息显示，可以后续改进为Toast组件
      alert('信息: ' + message)
    }

    // 更新活动过滤器显示
    function updateActiveFilters() {
      const activeFiltersContainer = document.getElementById('activeFilters')
      const filterPillsContainer = document.getElementById('filterPills')
      const mainContainer = document.getElementById('split').parentElement
      
      // 收集所有激活的过滤器
      const filters = []
      
      if (activeFilters.search) {
        filters.push({
          type: 'search',
          label: `搜索: "${activeFilters.search}"`,
          value: activeFilters.search
        })
      }
      
      if (activeFilters.status !== 'all') {
        const statusLabels = {
          'inbox': '待处理',
          'selected': '已选中'
        }
        filters.push({
          type: 'status',
          label: `状态: ${statusLabels[activeFilters.status] || activeFilters.status}`,
          value: activeFilters.status
        })
      }
      
      if (activeFilters.score) {
        filters.push({
          type: 'score',
          label: `评分: ${activeFilters.score}`,
          value: activeFilters.score
        })
      }
      
      if (activeFilters.source) {
        filters.push({
          type: 'source',
          label: `来源: ${activeFilters.source}`,
          value: activeFilters.source
        })
      }
      
      // 如果有激活的过滤器，显示过滤器条
      if (filters.length > 0) {
        activeFiltersContainer.classList.add('visible')
        mainContainer.classList.add('with-filters')
        
        filterPillsContainer.innerHTML = filters.map(filter => `
          <div class="filter-pill">
            ${filter.label}
            <span class="filter-pill-remove" onclick="removeFilter('${filter.type}')" title="移除过滤器">
              ×
            </span>
          </div>
        `).join('')
      } else {
        activeFiltersContainer.classList.remove('visible')
        mainContainer.classList.remove('with-filters')
        filterPillsContainer.innerHTML = ''
      }
    }

    // 移除特定过滤器
    function removeFilter(filterType) {
      switch (filterType) {
        case 'search':
          activeFilters.search = ''
          searchQuery = ''
          document.getElementById('searchInput').value = ''
          break
        case 'status':
          activeFilters.status = 'all'
          currentStatus = 'all'
          // 更新标签状态
          document.querySelectorAll('.tabs-trigger').forEach(t => t.classList.remove('active'))
          document.querySelector('[data-status="all"]').classList.add('active')
          break
        case 'score':
          activeFilters.score = null
          break
        case 'source':
          activeFilters.source = null
          break
      }
      
      updateActiveFilters()
      loadArticles()
    }

    // 🔥 自动RSS抓取功能
    async function autoFetchRSS() {
      try {
        const lastFetch = localStorage.getItem('lastRSSFetch')
        const now = Date.now()
        const oneDay = 24 * 60 * 60 * 1000 // 24小时
        
        // 检查是否需要抓取
        if (!lastFetch || (now - parseInt(lastFetch)) > oneDay) {
          console.log('🔥 检测到需要自动抓取RSS...')
          
          // 显示自动抓取通知
          const notification = document.createElement('div')
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: hsl(var(--primary));
            color: hsl(var(--primary-foreground));
            padding: 1rem;
            border-radius: var(--radius);
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            z-index: 1000;
            font-size: 0.875rem;
            max-width: 300px;
          `
          notification.innerHTML = '🔥 正在自动抓取最新RSS内容...'
          document.body.appendChild(notification)
          
          // 执行自动抓取
          await fetchAllRssSources()
          
          // 记录抓取时间
          localStorage.setItem('lastRSSFetch', now.toString())
          
          // 更新通知
          notification.innerHTML = '✅ RSS自动抓取完成！'
          notification.style.background = 'hsl(142.1 70.6% 45.3%)'
          
          // 3秒后移除通知
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification)
            }
          }, 3000)
          
        } else {
          const timeSinceLastFetch = now - parseInt(lastFetch)
          const hoursLeft = Math.ceil((oneDay - timeSinceLastFetch) / (60 * 60 * 1000))
          console.log(`⏰ RSS上次抓取时间: ${new Date(parseInt(lastFetch)).toLocaleString()}`)
          console.log(`⏰ 下次自动抓取还有 ${hoursLeft} 小时`)
        }
      } catch (error) {
        console.error('自动RSS抓取失败:', error)
      }
    }

    // 启动应用
    async function startApp() {
      await initApp()
      // 页面加载完成后检查是否需要自动抓取
      await autoFetchRSS()
    }
    
    startApp()
  </script>
</body>
</html>